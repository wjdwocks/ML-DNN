- 파이썬의 리스트에 대하여
1. 리스트의 덧셈 : 
	- list1 = [1, 2, 3], list2 = [a, b, c]가 있다고 했을 때, result = list1 + list2라고 한다면 list1에 list2가 선형적으로 추가된 형태가 된다.
result = [1, 2, 3, a, b, c]

2. zip()을 이용한 두 리스트를 동시에 참조, 새로운 2차원 리스트를 생성하는 방법.
	- 위의 예시처럼 list1과 list2가 있을 때 result를 만드는 방법이 list1 + list2가 있고, zip()과 반복문을 이용한 방식이 있다.
result = [[l, r] for l, r in zip(list1, list2)]라고 한다면
result = [[1, a], [2, b], [3, c]]가 된다.

3. 리스트에 원소를 추가하는 방법.
	- list = []과 같이 빈 리스트를 선언할 수 있고, list.append(10)과 같이 리스트의 맨 뒤에 10이라는 원소를 추가할 수 있다.

4. range 함수?
	- 이것은 리스트를 만드는 함수라기보다는 범위의 숫자를 생성하는 함수라고 봐야 함.
	- 이것 또한 numpy의 arange와 같이 start, stop, step으로 이루어져 있으며, range(0, 10, 2)라면
	[0, 2, 4, 6, 8] 이 포함된다.


- 파이썬의 numpy라이브러리
1. 파이썬의 리스트는 numpy배열로 변환할 수 있다. 
	- list_arr = np.array(list1)을 통해 numpy배열로 변환하고, 이렇게 변환해야 numpy의 다양한 함수들을 이용할 수 있다.

2. numpy의 arange함수
	- index = np.arange(49)라고 한다면 index에는 [0, 1, 2, 3, .... 47, 48]의 각 원소가 자신의 index번호를 가지도록 numpy배열이 만들어진다.

3. numpy의 shuffle함수
	- np.random.shuffle(index)라고 하면 index는 numpy배열이므로 이 배열에 속한 원소들을 랜덤으로 섞어준다.

4. numpy의 column_stack함수
	: 이 함수는 결합하려는 리스트들(배열의) 첫 번째 차원이 동일해야 한다.
	- list1 = [1, 2, 3], list2 = [a, b, c]라고 한다면
	- result = np.column_stack(list1, list2)의 결과는	
	- result = [[1, a], [2, b], [3, c]]가 된다.

5. numpy의 arange 함수
	: 이 함수는 특정 범위의 값을 갖는 numpy 배열을 만드는 함수이다.
	- list = np.arange(0.0001, 0.001, 0.0001) 과 같이 사용하고 각 매개변수는 start, stop, step을 의미하며, stop값은 배열에 포함되지 않는다.
	즉, list = [0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008, 0.0009]이 됨.

6. numpy배열의 슬라이싱
	: fruits라는 데이터가 (300, 100, 100)의 shape을 띈다면 아레의 세 개는 모두 같은 의미를 갖는다.
	-1. fruits[0, 0, :]
	-2. fruits[0][0]
	-3. fruits[0][0][:] 

7. numpy의 argsort()함수.
	: 이 정렬 함수는 정렬된 배열을 반환하거나 하는 것이 아닌, 정렬될 인덱스를 순서대로 반환해준다.
	- 아레처럼 인덱스 번호의 순서로 알려주기 때문에 순서대로 출력하기 위해서는 저 sorted_index를 그대로 사용할 수 있다.
	
ex)	abs_mean = np.array([50, 20, 30, 10, 40])
	sorted_index = np.argsort(abs_mean)
	print(sorted_index) # [3 1 2 4 0]
	print(abs_mean[sorted_index[:5]]) # [10 20 30 40 50]
	
8. len() 함수에 대해
	: 이 len()은 리스트나 배열, numpy배열에 대해 모두 사용 가능한데, 이는 무조건 첫 번쨰 차원의 값만 반환해준다.
	- (300, 10000)의 numpy배열이라면 300이 반환되고, 비정형 리스트의 경우 [[1,2], [3,4,5], [6]]이라도 3이 반환됨.


- 파이썬의 pandas 라이브러리
	: import pandas as pd
1. csv확장자로 되어있는 데이터를 불러오는 방법 (csv파일은 로컬 파일의 형태 또는 http(웹 주소)의 형태로 있을 수 있다)
	- data = pd.read_csv('https://raw.githubusercontent.com/rickiepark/hg-mldl/master/fish.csv', header = infer/None)
	- header 매개변수를 이용하여 csv데이터의 맨 첫번 째 행을 헤더로 인식할 것인지, 헤더가 없는 데이터 형식인지를 지정해줄 수 있다.

ex) csv 데이터의 헤더가 있는 경우
Weight	Length	Diagonal	Height	Width	Species
10		20		30		2		5		Bream
5		10		15		1		3		white fish
	- 위의 예시와 같이 헤더가 있는 경우 pd.unique() 메서드를 통해서 각 열에 고유하게 있는 값 만을 지정할 수 있다.
	- 만약 Species를 유추하려고 한다면, 어떤 Species가 포함되어 있는지 알아야 할 것이다.
	- 그렇기 때문에, Species라는 헤더에 포함된 값들 중 고유한 값들을 알아내서 어디에 포함되는지 알아볼 수 있을 것이다.
	- print(pd.unique(data['Species']))로 알아내야 함.

2. pandas로 데이터를 가져왔을 때 이게 몇개의 특성이 있고, 몇개의 샘플이 있는지를 확인하기 위해서 .shape를 이용할 수 있다.
	- 이 .shape는 pandas의 데이터 프레임은 행의 개수(샘플의 개수), 열의 개수(특성의 개수)를 tuple로 반환해주고, numpy배열에 대해서는 각 차원의 크기를 반환해주게 된다.
	ex) arr = np.array([[1,2,3], [4,5,6]]) 이라면 (2,3)을 반환함.

3. pandas 데이터 프레임을 numpy로 변환하는 .to_numpy() 메서드
	- pandas로 읽어온 데이터는 target이 되는 Species 와 특성이 되는 weight, length, diagonal, height, width가 모두 함께 있을 것이다. 그렇기 때문에 특성이 되는 train_data 와 train_target을 나누어 주어야 하는데 이는 우리가 직접 pandas의 to_numpy()함수로 지정해줄 수 있다.
	ex) train_target = data['Species'].to_numpy()
	ex) train_input = data[['Weight', 'Length', 'Diagonal', 'Height', 'Width']].to_numpy()로 아레와 같은 형태의 2차원 numpy배열로 만들 수 있다.
[
  [Weight1, Length1, Diagonal1, Height1, Width1],  # 첫 번째 샘플
  [Weight2, Length2, Diagonal2, Height2, Width2],  # 두 번째 샘플
  [Weight3, Length3, Diagonal3, Height3, Width3],  # 세 번째 샘플
  ...
]



